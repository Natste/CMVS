-- -- -- -- -- -- -- -- -- 
CODE:

Accessing the entire code:
This is the MATLAB Code used. It can be accessed from Stephen Natale's Github for the CMVS MQP:
https://github.com/Natste/CMVS

To Access the main.m file:
CMVS-master > MATLAB_CMV > main.m
This is where the improvements made to the MATLAB code for the academic year 2021-2022 occurred.

Arduino Code:
To operate the sensors, such that data collection can begin on the array. Upload the readsensors.ino file.
CMVS-master > Arduino > readsensors > readsensors.ino

ThingSpeak:
I do not recommend using the code from the ThingSpeak folder as it likely is outdated. Instead, I recommend using the ThingSpeak code from another 
deliverable submitted.

Scripts for Hammad's model:
These scripts aren't on the Github as they were created at the very end of the project. The goal was to input live irradiance and temperature
sensor values to a Simulink model to predict the output power of the PV array. As we were having major difficulties with directly collecting
these values with Simulink, we used a series of programs to go from Arduino to Simulink. The Arduino program (readTempAndLicor.ino) is
what enables the Arduino to convert received signals to temperature and irradiance values that we understand. A python program (either 
readSerial-dependent.py or readSerial-independent.py) is used to read the COM port that the Arduino script is writing values to. Python file
"readSerial-independent.py" can be ran by itself and will continously print detected sensor values. Python file "readSerial-dependent.py" is
used by the Matlab script "readSerialMatlab.m" to save the detected sensor values as usuable variables in Matlab. Due to a limitation in
Matlab, the script must be run continously to display updated values. The Matlab script isn't able to be integrated with the Simulink model
because a command needed to run the python script (pyrunfile) isn't supported in Simulink. This leads to our recommendation of focusing on
trying to use Arduino directly through Simulink. While this may lead to having to swap out the specific DHT22 temperature sensor with a
termistor (for ease of use), this will allow for a much more streamlined and less complex work flow.

-- -- -- -- -- -- -- -- --
PCB DESIGNS:

There are several iterations of designed PCBs. The largest PCB is not present in our deliverables because it was designed 
by a graduate student and not the undergrads.
* The "RJ45_CMVS_PCB_V2" located in the PCB Designing by Steve is designed for an Ethernet array approach using the Arduino Nano IoT 33.
* The "RJ45_CMVS_PCB_V3" located in the PCB Designing by Steve is designed for standard array approach using the Arduino Nano IoT 33.
* The "MQP CMVS PCB" PCB design was created by the undergraduate team and is what we propose to be used when this project is continued.

-- -- -- -- -- -- -- -- --